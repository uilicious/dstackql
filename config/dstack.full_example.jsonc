{
	//
	// ## Providers
	//
	// This represent the various data layers providers used in the system.
	//
	// The following config example covers all the various possible connection types
	// all names, and config examples can be adjusted for the specific use case.
	//
	"provider" : [
		
		//================================================================================
		//
		// ### Cacheing Layer Connectors
		//
		// Typically used to improve read performance of frequently accessed data
		//
		//================================================================================

		//------------------------------------------------------------------
		// **StructCache**
		//
		// Local in memory caching on the current instance.
		//
		// Supports: 
		// - DataObjectMap (storage mode only)
		//------------------------------------------------------------------
		{
			"name" : "local_structcache",
			"type" : "StructCache",

			// Default config values
			// ----

			// // Number of objects to store,
			// //
			// // if each object is ~6 KB including overheads
			// // the default 100k objects, will use up ~ 600 MB ram space
			// "capacity": 100000
		},

		//------------------------------------------------------------------
		// **HazelcastCache**
		//
		// Remote hazelcast cluster, with data structures configured in caching mode.
		// This requires the usage of the custom "hazelcast" container with JC addon code.
		//
		// Supports: 
		// - DataObjectMap (storage mode only)
		// - KeyValueMap
		// - KeyLongMap
		//------------------------------------------------------------------
		{
			"name" : "remote_hazelcast_cache",
			"type" : "HazelcastCache",

			"hazelcast": {

				// Connect as a client
				"mode" : "client",

				// Example conneciton details
				"port" : 5701,
				"groupName": "hc-cache",
				"memberTcpList" : [
					"hc-cache.hazelcast.svc.cluster.local"
				]
			}
		},

		//================================================================================
		//
		// ### DB Connectors
		//
		// Typically used to perform storage, and query
		//
		//================================================================================

		// {
		// 	"name" : "remote_mongodb",
		// 	"type" : "mongodb",
		// 	"mongodb" : {
		// 		// Mongodb protocol to use, either
		// 		// - "mongodb"
		// 		// - "monogodb+srv"
		// 		"protocol": "mongodb",
		// 		// User and password settings
		// 		"user": "db_user",
		// 		"pass": "db_user",
		// 		// mongodb host setting
		// 		"host": "localhost",
		// 		// mongodb port setting
		// 		// this is ignored for "monogodb+srv"
		// 		"port": 27017,
		// 		// mongodb option string setting, 
		// 		"opt_str": "r=majority&w=majority&retryWrites=true&maxPoolSize=50"
		// 	}
		// },

		//================================================================================
		//
		// ### SQL Connectors
		//
		// Typically used to perform storage, and query
		//
		//================================================================================

		// {
		//     "name": "project_workspace",
		//     "type": "filelayered",
		//     "storage": "/storage/apirunner/storage",
		//     "appendNameSpace": false
		// },
		// {
		// 	// Data stack type
		// 	"type" : "jsql",
		// 	"name" : "main_db",
		// 	"db" : {
		// 		// [MY-SQL] name implmentation
		// 		"type" : "mysql",
		// 		"host" : "some_mysql_db",
		// 		"port" : 3306,
		// 		"name" : "database_name",
		// 		"user" : "database_user",
		// 		"pass" : "database_pass",
		// 	}
		// }

		// Local in memory storage on the current instance
		{
			"type" : "StructSimple",
			"name" : "local_structsimple"
		}

	],

	//
	// sys.DStack.namespace
	//
	// Declaration of namespace relation to the providers
	//
	// Normally a caching layer will be placed first, followed by
	// the actual implmentation layer.
	//
	// The last layer will normally be the "single source of truth",
	// for handling data accuracy resolution. (Normally JSql)
	//
	"namespace" : [
		{
			"regex" : ".*",
			"providers" : [
				"instance_cache",
				"main_db"
			]
		}
	]
}